# Module Spec: achilles-codeGenerator.js

## 1. Description
The `achilles-codeGenerator.js` file is the entry point for the autonomous code generation agent. It monitors specification files for changes and regenerates the corresponding source code files when they become outdated.

## 2. Exported API
- `class AchillesCodeGenerator`
  - `constructor()`: Reads runtime flags (such as `ACHILLES_RUN_ONCE`), primes the LLM client slot, and initialises watcher state used across the other methods.
  - `async main()`: Configures the LLM, instantiates the client on first use, and either performs a one-off regeneration (`ACHILLES_RUN_ONCE`) or starts watching the `specs/` tree.
  - `watchSpecsDirectory()`: Hooks a recursive `fs.watch` listener that triggers regeneration whenever a `.specs` file changes on disk.
  - `stopWatching()`: Tears down the watcher and terminates the process when running in `run-once` mode after at least one successful generation.
  - `getCodePath(specPath)`: Maps a specification path back to the emitted code file by stripping the `.specs` suffix and mirroring the relative location under the project root.
  - `async generateAllSpecsOnce()`: Scans all specs, determines which require regeneration, and invokes `generateCode` for each when running in batch mode.
  - `async collectSpecFiles(directory, base)`: Recursively walks a directory and returns a list of relative `.specs` paths used by `generateAllSpecsOnce`.
  - `async isSpecNewer(specPath, codePath)`: Compares modification times (falling back to `true` if the code file does not exist) to decide whether regeneration is necessary.
  - `async generateCode(specPath)`: Loads the full specification context, calls the LLM (with retries and optional validation for JavaScript outputs), writes the resulting implementation, and applies QuickSum fallbacks when generation fails repeatedly.
  - `getFallbackCode(specPath, context)`: Returns a canned QuickSum implementation when generation repeatedly fails for the known QuickSum demo spec.
  - `extractCode(response)`: Normalises the LLM response, stripping code fences and aggregating array payloads until only the raw source remains.
  - `validateJavaScript(code)`: Performs a fast syntax check using `eval`, logging validation errors and signalling whether the output can be accepted.
  - `async writeCodeFile(codePath, content)`: Creates parent directories as needed and persists the generated source file using UTF-8 encoding.
- `async main()`: Convenience entry point used when the script is executed directly; it simply instantiates `AchillesCodeGenerator` and delegates to its `main()` method.
## 3. Dependencies
- `fs`: For file system operations (watching files, reading stats and content).
- `path`: For handling file paths.
- `src/services/LLMAgentClient.js`: To communicate with the LLM.
- `src/services/specsManager.js`: To load the context for a given spec file.

## 4. Implementation Details
- The file watcher should be recursive and watch the entire `specs` directory.
- The `generateCode` function should use `doTaskDeep` for code generation to ensure high-quality output.
- The generated code must be valid Node.js (CommonJS) JavaScript that can run with the `node` command and should avoid non-standard dependencies.
- When generating JavaScript, the agent should perform a fast syntax check (e.g., using `eval`) and retry generation up to three times if the validation fails.
- Non-JavaScript files do not require validation retries.
- The agent must log its actions to the console, providing transparency into what it's doing.
- When the environment variable `ACHILLES_RUN_ONCE` is set (to `true`, `yes`, or `1`), the watcher should stop after successfully regenerating code and allow the process to exit.
- The generator treats specification files as the single source of truth; it should respond to any new or modified specs introduced by the planning agent (including newly created documents such as game rules or interaction guidelines) without requiring manual configuration.
