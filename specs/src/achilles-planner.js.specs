# Module Spec: achilles-planner.js

## 1. Description
The `achilles-planner.js` file is the entry point for the interactive planning agent. It orchestrates the conversation with the developer, manages the session context, and executes action plans to modify specification files.

## 2. Exported Functions
- None. This is the main executable script.

## 3. Internal Functions
- `main()`: The main function that runs the agent's loop.
- `getUserInput()`: A function to read a line of input from stdin.
- `getIntent(context, userInput)`: A function that calls the LLM to determine the user's intent.
- `generateActionPlan(context, intent)`: A function that calls the LLM to generate a plan of file modifications.
- `confirmActionPlan(plan)`: A function that shows the plan to the user and asks for confirmation.
- `executeActionPlan(plan)`: A function that uses `specsManager` to execute the file modifications.
- `handleInterruption()`: A function to manage the interruption workflow.

## 4. Dependencies
- `readline`: For reading user input from the console.
- `src/services/LLMAgentClient.js`: To communicate with the LLM.
- `src/services/specsManager.js`: To read and write specification files.
- `src/services/diff.js`: To display proposed changes.
- `src/services/contextStorage.js`: To persist user memory, history, and idea bank data under `.achilles/`.

## 5. Implementation Details
- The main loop should be wrapped in a `try...catch` block to handle unexpected errors.
- The context sent to the LLM must include the project vision, relevant requirements, and the full conversation history so the agent can avoid repeating questions.
- Requests to the LLM must explicitly instruct it to respond with JSON. If the response is not valid JSON, the agent should gracefully downgrade the interaction (e.g., treat the reply as a simple answer) instead of throwing an error.
- The action plan should be a structured object, like an array of `{ action: 'create' | 'update' | 'delete', path: string, content: string }` objects.
- The CLI must maintain an editable input history; pressing the up/down arrows should cycle through previous prompts so the user can revise and resubmit them.
- Confirmation prompts must recognize localized affirmations/negations (`yes`, `da`, `no`, `nu`, etc.) and keep prompting when the input is ambiguous, reminding the user how to request further changes.
- LLM failures (network/API issues) should be surfaced as friendly messages without crashing the planner; the session should remain usable after the error.
- When the user only requests information, the planner should reply with a read-only summary (empty plan) and skip the confirmation workflow. The `summary` field in the intent is used to relay the informational response.
- Every LLM prompt must include the current vision, the full content of each requirement, and a list plus full content of all known specification files (excluding the requirements directory) pulled via `specsManager`. This keeps the model grounded in the real workspace state.
- Plans must be validated before confirmation. If the LLM references non-existent files for `update`/`delete`, the planner should detect the issue, inform the user, and attempt to regenerate the plan once before giving up with a friendly message.
- The planner should treat `.achilles/memory`, `.achilles/.history/history.md`, and `.achilles/.ideas/ideas.md` as first-class managed artefacts. The LLM may propose `update_memory`, `update_history`, or `update_ideas` actions (each carrying the full replacement content) alongside regular spec edits. Diffs and execution must respect these actions.
- User and agent utterances are appended to `.achilles/.history/history.md` automatically, but the LLM can also curate the file via `update_history`.
- The planner should prefer making reasonable assumptions, offering them for approval, instead of asking multiple clarification questions.
- After completing a work cycle, the planner should surface any relevant entries from `.achilles/.ideas/ideas.md` to inspire the user about next steps.
- The CLI must detect multi-line pastes from the terminal and treat them as a single input message (buffering briefly) so a pasted specification fragment does not trigger multiple turns.
- All log, prompt, and error messages emitted by the planner must be written in English for consistency.
- The CLI should default to the deep LLM model; users can start the planner with `-fast` to opt into the fast model if lower latency is preferred for that session.
