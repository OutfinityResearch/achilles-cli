# Module Spec: specsManager.js

## 1. Description
This module is responsible for all file system operations related to specification files. It provides a simple and centralized API for creating, reading, updating, and deleting specification documents.

## 2. Exported Functions
- `createVision(content: string): Promise<void>` – Writes the project vision to `specs/vision.md`, creating parent directories when required.
- `updateVision(content: string): Promise<void>` – Alias to `createVision`, clarifying the intent when callers conceptually update the vision.
- `loadVision(): Promise<string>` – Reads the vision file, returning `''` when the file does not exist.
- `listRequirements(): Promise<string[]>` – Lists requirement filenames beneath `specs/reqs/`, returning an empty array if the folder is absent.
- `createRequirement(filename: string, content: string): Promise<void>` – Persists a requirement markdown file safely inside `specs/reqs/`.
- `updateRequirement(filename: string, content: string): Promise<void>` – Overwrites a requirement file; delegates internally to `createRequirement`.
- `loadRequirement(filename: string): Promise<string>` – Reads a specific requirement file and resolves with its markdown content.
- `deleteRequirement(filename: string): Promise<void>` – Deletes a requirement file if it exists, otherwise returns quietly.
- `loadAllRequirementDetails(): Promise<Array<{ path: string, content: string }>>` – Reads and returns every requirement’s filename plus markdown body for downstream prompt assembly.
- `extractRequirementNumber(fileName: string): number | null` – Pulls the numeric `REQ#` identifier out of a filename, returning `null` when the pattern does not match.
- `getNextRequirementNumber(): Promise<number>` – Computes the next sequential requirement index based on the existing files in `specs/reqs/`.
- `createSpecs(specPath: string, content: string): Promise<void>` – Writes a general specification file under `specs/`, normalising relative paths.
- `updateSpecs(specPath: string, content: string): Promise<void>` – Overwrites a specification file; mirrors the behaviour of `createSpecs`.
- `loadSpecs(specPath: string): Promise<string>` – Reads any specification file beneath `specs/`, enforcing path safety.
- `deleteSpecs(specPath: string): Promise<void>` – Removes the specified spec file if present.
- `listSpecFiles(): Promise<string[]>` – Returns a sorted list of non-requirement spec files relative to `specs/`.
- `loadAllSpecDetails(): Promise<Array<{ path: string, content: string }>>` – Reads all non-requirement specs, returning both path and content to provide complete LLM context.
- `loadContextForSpecs(specPath: string): Promise<{ vision: string, requirements: string[], specContent: string }>` – Bundles the project vision, every requirement, and the requested spec file for code-generation prompts.

## 3. Dependencies
- `fs.promises`: For asynchronous file system operations.
- `path`: For handling file paths.

## 4. Implementation Details
- All functions should be asynchronous and return promises.
- The functions should handle file system errors gracefully (e.g., file not found).
- Directory traversal helpers (`listSpecFiles`, `loadAllSpecDetails`) must ignore the `reqs` subdirectory, ensure paths stay under `specs/`, and skip files that disappear between listing and reading instead of throwing.
- `loadAllRequirementDetails` and `loadAllSpecDetails` should return arrays of `{ path, content }` objects so higher-level agents can build accurate context for LLM prompts.
- `extractRequirementNumber` should return the numeric index (if any) from filenames following the `REQ#<number>_...` convention, while `getNextRequirementNumber` scans existing requirements to produce the next sequential identifier.
- The `loadContextForSpecs` function will need to intelligently find requirements relevant to a given spec file, perhaps by searching for the module path in the requirement files.
- The file paths for requirements and specs should be resolved relative to the `specs` directory in the current working directory (or an override provided via `ACHILLES_WORKSPACE_DIR`).
