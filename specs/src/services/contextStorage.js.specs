# Module Spec: contextStorage.js

## 1. Description
Provides helper functions for persisting planner context outside of formal specifications. The storage lives under the hidden `.achilles/` directory inside the active workspace and tracks user memory, conversational history and idea bank files.

## 2. Exported Functions
- `ensureStructure(): Promise<void>` – Creates `.achilles/`, `.achilles/.history`, and `.achilles/.ideas` if they do not already exist.
- `loadMemory(): Promise<string>` – Reads `.achilles/memory`, returning an empty string when the file has not been created yet.
- `saveMemory(content: string): Promise<void>` – Writes the supplied text to `.achilles/memory`, overwriting prior contents.
- `loadHistory(): Promise<string>` – Retrieves the accumulated conversation history from `.achilles/.history/history.md`, defaulting to an empty log when missing.
- `saveHistory(content: string): Promise<void>` – Replaces the entire history log with the provided text.
- `appendHistoryEntry(entry: string): Promise<void>` – Appends a single newline-terminated entry to the history log, creating parent folders on demand.
- `loadIdeas(): Promise<string>` – Reads the idea bank stored at `.achilles/.ideas/ideas.md`, returning an empty string if it does not exist.
- `saveIdeas(content: string): Promise<void>` – Overwrites the idea bank file with new content.

## 3. Dependencies
- `fs` / `fs.promises`
- `path`

## 4. Implementation Details
- All helpers must resolve paths relative to the current workspace, honouring `ACHILLES_WORKSPACE_DIR` when set.
- `ensureStructure()` creates the `.achilles`, `.achilles/.history`, and `.achilles/.ideas` directories if they do not exist.
- `load*` helpers should return empty strings when their targets are missing.
- `save*` helpers should create parent directories automatically and write UTF-8 text files.
- `appendHistoryEntry(entry)` appends a newline-terminated string to `.achilles/.history/history.md`, ensuring directories exist.
