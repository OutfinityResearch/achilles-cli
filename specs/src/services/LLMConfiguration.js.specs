# Module Spec: LLMConfiguration.js

## 1. Description
This module is responsible for managing the configuration of the LLM provider, API key, and preferred fast/deep model selections. It can either load the configuration from a `.env` file or prompt the user for it.

## 2. Exported Functions
- `async configure(): Promise<void>` â€“ Resolves the active provider, API key, and fast/deep model names by loading an existing `.env` file or walking the user through an interactive prompt, then normalises the values into environment variables for downstream services.

## 3. Internal Functions
- `findEnvFile()`: Searches for a `.env` file in the current directory and its parents.
- `loadEnvFile(filePath)`: Loads the environment variables from a `.env` file.
- `promptForConfig()`: Presents the supported providers, gathers the API key plus preferred fast/deep models, and returns a normalised configuration object.
- `validateKey(provider, apiKey, model)`: Performs a lightweight API call using `LLMAgentClient` to verify that the supplied credentials and model are valid before persisting them.
- `createEnvFile(provider, apiKey, fastModel, deepModel)`: Writes a populated `.env` file that captures the chosen provider, API key, and model overrides.

## 4. Dependencies
- `fs`: For file system operations.
- `path`: For handling file paths.
- `readline`: For reading user input.
- `src/services/LLMAgentClient.js`: To validate the API key.

-## 5. Implementation Details
- The `findEnvFile` function will search up the directory tree until it finds a `.env` file or reaches the root.
- The configuration template must populate API key slots plus explicit fast/deep model entries for each provider (`codestral`, `mistral`, `gemini`, `openai`, `claude`).
- The `promptForConfig` function will present a list of supported providers to the user and collect the API key along with fast/deep model names (falling back to provider defaults when left blank).
- Once a provider is selected (either from environment variables or via prompt), the module must set `ACHILLES_LLM_PROVIDER`, `ACHILLES_LLM_API_KEY`, `ACHILLES_LLM_FAST_MODEL`, and `ACHILLES_LLM_DEEP_MODEL` so that other services can rely on a single configuration source.
